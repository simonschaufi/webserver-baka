/*
 * Interface.java
 *
 * Created on 20. Juni 2007, 10:45
 */

package webserver;

import java.awt.*;
import java.util.StringTokenizer;
import java.io.*;

/**
 *
 * @author  skolbens
 * Diese Klasse bildet die Oberfläche
 */
public class Interface extends javax.swing.JFrame {
    
    /** Creates new form Interface */
    Server s = null;
    
    /**
     * Ausgabefunktion für Messages im Gui, sowie Fokus setzten auf das zuletzt
     * geschriebenen Element.
     * @param message Nachricht die Ausgegeben werden soll
     */
    public void printMessages(String message)
    {
        this.ListMessages.add(message);
        this.ListMessages.makeVisible(this.ListMessages.getItemCount()-1);
    }
    
    public Interface() {
        super("MSP Webserver -- yeah!");
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelAll = new javax.swing.JPanel();
        LabelMultihoming = new javax.swing.JLabel();
        ButtonDeleteMultihoming = new javax.swing.JButton();
        LabelPort = new javax.swing.JLabel();
        TextFieldPort = new java.awt.TextField();
        ListMultihoming = new java.awt.List();
        
        
        ButtonRun = new javax.swing.JButton();
        ButtonStop = new javax.swing.JButton();
        LabelStatus = new java.awt.Label();
        LabelDefault = new javax.swing.JLabel();
        LabelMessages = new javax.swing.JLabel();
        ListMessages = new java.awt.List();
        ButtonSet = new javax.swing.JButton();
        PanelMultihoming = new javax.swing.JPanel();
        ButtonAdd = new javax.swing.JButton();
        TextFieldRoot = new java.awt.TextField();
        TextFieldHost = new java.awt.TextField();
        LabelHost = new javax.swing.JLabel();
        LabelRoot = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                WindowStartet(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        LabelMultihoming.setFont(new java.awt.Font("Tahoma", 1, 12));
        LabelMultihoming.setText("Multihoming");

        ButtonDeleteMultihoming.setText("delete");
        ButtonDeleteMultihoming.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonDeleteMultihoming_Click(evt);
            }
        });
        ButtonDeleteMultihoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteMultihomingActionPerformed(evt);
            }
        });

        LabelPort.setFont(new java.awt.Font("Tahoma", 0, 12));
        LabelPort.setText("port");

        TextFieldPort.setFont(new java.awt.Font("Dialog", 2, 12));
        TextFieldPort.setForeground(new java.awt.Color(204, 204, 255));
        TextFieldPort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldPort_Click(evt);
            }
        });
        TextFieldPort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldPort_FocusLost(evt);
            }
        });



        

        ButtonRun.setText("run server");
        ButtonRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonRunMouseClicked(evt);
            }
        });

        ButtonStop.setText("stop server");
        ButtonStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonStopMouseClicked(evt);
            }
        });

        LabelStatus.setFont(new java.awt.Font("Dialog", 1, 12));
        LabelStatus.setForeground(new java.awt.Color(255, 0, 51));
        LabelStatus.setText("stopped");

        LabelDefault.setText("Default is port 80");

        LabelMessages.setFont(new java.awt.Font("Tahoma", 1, 12));
        LabelMessages.setText("Server Messages");

        ListMessages.setBackground(new java.awt.Color(0, 0, 102));
        ListMessages.setForeground(new java.awt.Color(102, 204, 0));

        ButtonSet.setText("set");
        ButtonSet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonSet_Click(evt);
            }
        });

        org.jdesktop.layout.GroupLayout PanelAllLayout = new org.jdesktop.layout.GroupLayout(PanelAll);
        PanelAll.setLayout(PanelAllLayout);
        PanelAllLayout.setHorizontalGroup(
            PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PanelAllLayout.createSequentialGroup()
                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelAllLayout.createSequentialGroup()
                        .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)

                            .add(org.jdesktop.layout.GroupLayout.TRAILING, PanelAllLayout.createSequentialGroup()
                                .add(37, 37, 37)
                                
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(PanelAllLayout.createSequentialGroup()
                                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, LabelMultihoming, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, ListMultihoming, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(LabelMessages, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                                    .add(PanelAllLayout.createSequentialGroup()
                                        .add(ButtonRun)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(ButtonStop)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(LabelStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(ListMessages, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)))
                            .add(PanelAllLayout.createSequentialGroup()
                                .add(LabelPort)
                                .add(14, 14, 14)
                                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(LabelDefault)
                                    .add(PanelAllLayout.createSequentialGroup()
                                        .add(TextFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 452, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(ButtonSet, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(ButtonDeleteMultihoming, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        PanelAllLayout.setVerticalGroup(
            PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, PanelAllLayout.createSequentialGroup()
                .addContainerGap()
                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(LabelMultihoming)
                    .add(LabelMessages))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(ListMessages, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .add(ListMultihoming, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelAllLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ButtonDeleteMultihoming)
                            .add(ButtonRun)
                            .add(ButtonStop))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(PanelAllLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(LabelStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelAllLayout.createSequentialGroup()
                        .add(PanelAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(LabelPort)
                            .add(TextFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(LabelDefault))
                    .add(ButtonSet))
                .add(30, 30, 30)

                .add(67, 67, 67)

                .addContainerGap())
        );

        PanelMultihoming.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Multihoming - Add new site", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        ButtonAdd.setText("Add");
        ButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonAddMouseClicked(evt);
            }
        });

        TextFieldRoot.setFont(new java.awt.Font("Dialog", 2, 12));
        TextFieldRoot.setForeground(new java.awt.Color(204, 204, 255));
        TextFieldRoot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldRoot_Click(evt);
            }
        });
        TextFieldRoot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldRoot_LostFocus(evt);
            }
        });

        TextFieldHost.setFont(new java.awt.Font("Dialog", 2, 12));
        TextFieldHost.setForeground(new java.awt.Color(204, 204, 255));
        TextFieldHost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextFieldHost_Click(evt);
            }
        });
        TextFieldHost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldHost_LostFocus(evt);
            }
        });

        LabelHost.setText("Host");

        LabelRoot.setText("Root");

        org.jdesktop.layout.GroupLayout PanelMultihomingLayout = new org.jdesktop.layout.GroupLayout(PanelMultihoming);
        PanelMultihoming.setLayout(PanelMultihomingLayout);
        PanelMultihomingLayout.setHorizontalGroup(
            PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PanelMultihomingLayout.createSequentialGroup()
                .addContainerGap()
                .add(PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(LabelRoot)
                    .add(LabelHost))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(TextFieldHost, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(TextFieldRoot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(ButtonAdd)
                .addContainerGap())
        );
        PanelMultihomingLayout.setVerticalGroup(
            PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PanelMultihomingLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(TextFieldHost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(LabelHost))
                .add(13, 13, 13)
                .add(PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelMultihomingLayout.createSequentialGroup()
                        .add(ButtonAdd, 0, 0, Short.MAX_VALUE)
                        .add(14, 14, 14))
                    .add(PanelMultihomingLayout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(PanelMultihomingLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(LabelRoot)
                            .add(TextFieldRoot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(PanelMultihoming, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 566, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(PanelAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PanelMultihoming, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * @param Mausevent
 * @return void
 * Methode wird beim Klicken auf den Stop Button aufgerufen
 * StopServerMouseClicked stopt den Server
 */
    private void ButtonStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonStopMouseClicked
    // TODO add your handling code here:
    if(s!= null)
   {       
       s.closeServer();
       s = null;
       LabelStatus.setText("stopped");
        LabelStatus.setFont(new Font("",Font.BOLD,12));
        LabelStatus.setForeground(Color.RED);
   }
}//GEN-LAST:event_ButtonStopMouseClicked
/**
 * @param Mausevent
 * @return void
 * Methode wird beim Klicken auf den Start Button aufgerufen
 * RunServerMouseClicked startet einen neuen Server
 */
private void ButtonRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonRunMouseClicked
    
    if(s==null){
        s = new Server(this);
        s.start();
        LabelStatus.setText("running");
        LabelStatus.setFont(new Font("",Font.BOLD,12));
        LabelStatus.setForeground(Color.BLUE);
        printMessages("Server wurde auf Port " + s.socket.getLocalPort() + " gestartet...");
        printMessages(" ");
    }

}//GEN-LAST:event_ButtonRunMouseClicked
/**
 * Methode wird nicht mehr verwendet
 */
private void WindowStartet(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_WindowStartet

}//GEN-LAST:event_WindowStartet
/**
 * @param WindowEvent
 * @return void
 * Methode wird aufgerufen wenn das Fenster sich öffnet
 * formWindowOpened ließt über die Host2RootList KLasse die Daten aus dem externen .TXT File ein
 */
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
        String[] MultihomingArray = MultihomingToFile.getFileContent();     
        int i = 0;
        while(MultihomingArray[i] != null){
            ListMultihoming.add(MultihomingArray[i]);
            String[] HostAndRoot = SubstringHostRoot(MultihomingArray[i]);
            Settings.addHost(HostAndRoot[0], HostAndRoot[1]);
            i++;
        }
    
}//GEN-LAST:event_formWindowOpened
/**
 * Methode wird nicht länger benötigt
 */
private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
    // TODO add your handling code here:
}//GEN-LAST:event_formWindowStateChanged
/**
 * @param MausEvent
 * @return void
 * Methode wird beim Klicken auf den SetPort Button aufgerufen
 * SetPort_Click verändert den Port auf dem der Server lauschen soll
 */
private void ButtonSet_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonSet_Click
    if(!(TextFieldPort.getText().equals("standard port 80 is set"))){
        char[] Zahlen = {'0','1','2','3','4','5','6','7','8','9'};
        char[] PortTextCharArray = TextFieldPort.getText().toCharArray();
        boolean check = false;
        for(int i = 0; i <= PortTextCharArray.length - 1; i++)
        {
            for(int j = 0; j <= 9 ; j++){
                if(PortTextCharArray[i] == Zahlen[j]){
                    check = true;
                    break;
                }
                else{
                    check = false;
                }
            }
        }
        if(check == true)
        {
            Settings.port = Integer.parseInt(TextFieldPort.getText());

        }
        else{

        }
    }
    else
    {
                
    }
}//GEN-LAST:event_ButtonSet_Click
/**
 * @param Mausevent
 * @return void
 * Methode wird beim Klicken auf den Delete Button ausgeführt
 * DeleteHost2Root_Click löscht die aktuell markierte Zeile in der Host2RootList
 */
private void ButtonDeleteMultihoming_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonDeleteMultihoming_Click
    if(ListMultihoming.getSelectedItem() != null){
        StringTokenizer st = new StringTokenizer(ListMultihoming.getSelectedItem(), " / ");
        Settings.deleteHost(st.nextToken());
        ListMultihoming.remove(ListMultihoming.getSelectedIndex());
        String[] sta = ListMultihoming.getItems();
        MultihomingToFile.setFileContent(sta);
    }   
}//GEN-LAST:event_ButtonDeleteMultihoming_Click
/**
 * @param Mausevent
 * @return
 * Methode wird beim Klicken auf den ADD Button aufgerufen
 * AddNewHost2RootMouseClicke fügt einen Host2RootList Eintrag hinzu
 *//**
 * @param FocusEvent
 * @return void
 * Mehtode wird aufgerufen wen die RootText_Textbox den Focus verliert
 * RootTExt_LostFocus ruft die CheckText - Methode auf
 */
private void TextFieldRoot_LostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldRoot_LostFocus
    CheckText(TextFieldRoot,"root");
}//GEN-LAST:event_TextFieldRoot_LostFocus
/**
 * @param MausEvent
 * @return void
 * Methode wird aufgerufen wenn in die RootText_Textbox geklickt wird
 * RootText_Click ruft die ChangeSettingsOfTextbox auf
 */
private void TextFieldRoot_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldRoot_Click
    ChangeSettingsOfTextbox(TextFieldRoot);
}//GEN-LAST:event_TextFieldRoot_Click
/**
 * @param FocusEvent
 * @return void
 * Mehtode wird aufgerufen wen die PortText_Textbox den Focus erhält
 * PortText_FocusLost fur die CheckText Methode auf
 */
private void TextFieldPort_FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldPort_FocusLost
    CheckText(TextFieldPort,"standard port 80 is set");
}//GEN-LAST:event_TextFieldPort_FocusLost
/**
 * @param MausEvent
 * @return void
 * Methode wird aufgerufen wenn in die PortText_Textbox geklickt wird
 * PortText_Click ruft die ChangeSettingsOfTextbox auf
 */
private void TextFieldPort_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldPort_Click
    ChangeSettingsOfTextbox(TextFieldPort);
}//GEN-LAST:event_TextFieldPort_Click
/**
 * @param FocusEvent
 * @return void
 * Mehtode wird aufgerufen wen die HostText_Textbox den Focus erhält
 * HostText_LostFocus ruft die CheckText Methode auf
 */
private void TextFieldHost_LostFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldHost_LostFocus
    CheckText(TextFieldHost,"host");
}//GEN-LAST:event_TextFieldHost_LostFocus
/**
 * @param MausEvent
 * @return void
 * Methode wird aufgerufen wenn in die HostText_Textbox geklickt wird
 * HostText_Click ruft die ChangeSettingsOfTextbox Methode auf
 */
private void TextFieldHost_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextFieldHost_Click
    ChangeSettingsOfTextbox(TextFieldHost);
}//GEN-LAST:event_TextFieldHost_Click

private void ButtonDeleteMultihomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteMultihomingActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_ButtonDeleteMultihomingActionPerformed

private void ButtonAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonAddMouseClicked
    //prüfen ob Text ungleich NULL und einfügen in HashMap
    if(!(TextFieldHost.getText().equals("host")) && !(TextFieldRoot.getText().equals("root"))){
        String Host2Root = TextFieldHost.getText() + " / " + TextFieldRoot.getText();
        if(Settings.getRoot(TextFieldHost.getText()) == null){
            ListMultihoming.add(Host2Root);
            Settings.addHost(TextFieldHost.getText(), TextFieldRoot.getText());
            
            String[] sta = ListMultihoming.getItems();
            MultihomingToFile.setFileContent(sta);
        } else{
            
        }
    } else{
        
    }
}//GEN-LAST:event_ButtonAddMouseClicked
/**
 * @param java.awt.Textfield (eine Textbox)
 * @return void
 * Methode wird von den ....Text_Click Methoden aufgerufen
 * ChangeSettingsOfTextbox setzt den Text auf NULL und ändert die Formatierung des Textes
 */
private void ChangeSettingsOfTextbox(java.awt.TextField aTextField){
    aTextField.setText("");
    aTextField.setFont(new Font("",Font.PLAIN,12));
    aTextField.setForeground(Color.BLACK);
}
/**
 * @param java.awt.Textfield (ein Textfeld); String
 * @return void
 * Dies Methode wird von den ...TextLostFocus Mehtoden aufgerufen
 * CheckText überprüft den String in dem übergebenen Textfeld und ändert ihn bei bestimmten Bedinungen
 */
private void CheckText(java.awt.TextField aTextField,String aName){
    if(aTextField.getText().equals("") ){
        aTextField.setText(aName);
        aTextField.setFont(new Font("",Font.ITALIC,12));
        Color C = new Color(204, 204, 255, 0);
        aTextField.setForeground(C);
    }
    else{}
}
/**
 * @param String
 * @return StringArray mit 2 Einträgen
 * Gibt einen Array mit 2 String Einträgen zurück (Host und Root)
 */
private String[] SubstringHostRoot(String s){
    char stringAsChar[] = s.toCharArray();
    String[] HostAndRoot = new String[2];
    String Host = "";
    String Root = "";
    int Position = s.indexOf(" / ");
    for(int i = 0; i <= Position - 1; i++){
        Host += stringAsChar[i];            
    }
    for(int j = Position + 3; j < s.length(); j++){
        Root += stringAsChar[j];
    }
    HostAndRoot[0] = Host;
    HostAndRoot[1] = Root;
    return HostAndRoot;
}
    /**
     * @param args the command line arguments
*/
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonDeleteMultihoming;
    private javax.swing.JButton ButtonRun;
    private javax.swing.JButton ButtonSet;
    private javax.swing.JButton ButtonStop;
    
    private javax.swing.JLabel LabelDefault;
    private javax.swing.JLabel LabelHost;
    private javax.swing.JLabel LabelMessages;
    private javax.swing.JLabel LabelMultihoming;
    private javax.swing.JLabel LabelPort;
    private javax.swing.JLabel LabelRoot;
    private java.awt.Label LabelStatus;
    private java.awt.List ListMessages;
    private java.awt.List ListMultihoming;
    private javax.swing.JPanel PanelAll;
    private javax.swing.JPanel PanelMultihoming;
    
    private java.awt.TextField TextFieldHost;
    private java.awt.TextField TextFieldPort;
    private java.awt.TextField TextFieldRoot;
    // End of variables declaration//GEN-END:variables
    
}
